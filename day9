1. 扩展一下时间转换

		time.time()   时间戳

		time.gmtime():  时间元组（UTC）

		time.localtime() :  本地时间元组 (UTC+8)

		time.strftime(‘%Y’, 时间元组):  时间元组转成字符串

         time.strptime(‘日期时间’, ‘％Y’): 把日期时间字符转成时间元组

		stat = os.stat(path):  返回 stat_result 文件信息（st_atime,  st_ctime, st_mtime）描述文件相关的时间，实际是一个浮点类型的时间戳

		时间戳 转成 时间元组：

		atime =	 time.localtime(stat.st_atime)  :  时间戳的秒数转成时间元组
		time.strftime(‘%Y-%m-%d’, atime):  将访问时间元组转成 2017-10-12


	 时间日期相关的模块：
			datetime(  date, time,  datetime):
				 datetime.datetime.today()   : 返回  datetime类对象
			calendar  日历


	day09 天 默写内容：
	1.   写出 open()函数打开文件时可以指定的 mode，每种mode表示的含义
				open()默认的打开mode方式： rt
				r: 只读
				r+:  读写，文件不存在则抛出异常
				r+b:  读写二进制文件，不能设置encoding, errors
				w: 只写, 文件不存在，则创建, 存在，则覆盖
				w+: 读写
				w+b:  读写二进制，
				a:  只写，追加（写到文件末尾）
				a+:  读写， 追加
				a+b:  读写二进制， 追加， 文件不存在，会创建
				rt:  只读文本，其它模式中，t是默认，除非使用了 b


	2.  写出 time.strftime()函数中支持的日期格式，如%Y
		  %Y :    4 位年，  ％y:  2位年
		  %m:
		 %d
        %H 24小时， %I 12小时， %p  AM｜PM
		 ％M
		 ％S
		 ％x  %X
		 %c

	3.  给出一个时间戳 19999191.992 ,写出转成 ‘yyyy-mm-dd’的格式的代码
			提示：time.localtime([secs])  将时间戳的秒数转成时间元组

			s = 19999191.992  ＃ time.time()
			t = time.localtime(19999191.992)
			st = time.strftime(‘%Y-%m-%d’, t)   #将时间元组转成字符串


 二、回顾 回调函数

		回调函数是调用方为了接收被调用方返回的数据而声明的，
		之前的方式调用某一个函数时，它可以直接通过 return 返回数据，
		但是在被调用方返回数据之前，调用方只能等待。而回调函数，对于
		调用方来说，不用等待，只需要提供一个地方（回调函数）来接收被
		调用方处理的数据结果即可。

		Python 中回调实现： 把函数可以看作为一个变量。
		int() 函数，将数字字符串转成数值

		i = int    # 函数作为变量使用时，只需要函数的名字， int.__name__
		i(‘’)    通过变量名 i 调用 int() 函数

	  注： 回调函数在调用方定义， 在调用第三方函数时，
		     直接将回调函数的名字传给第三方函数，
            在第三方函数内部，等数据或功能完成后，再通过回调函数的名字，来执行回调函数


三、 装饰函数

	本意： 不修改现有的函数时，需要对函数进行额外地扩展功能，需要使用装饰函数。
	使用场景： 测试函数运行的时间， 在事务处理时的提交事务(数据库)，打印日志。

	如何定义装饰函数：
	def  loging(fn):    # 1. 函数参数必须且只能为一个参数，代表某一个被修饰的函数名
		  # 2. 定义一个包装函数
		  def wrapper(*args, **kwargs):   # 3. 包装函数名可以任一命名，参数必须是*args, **kwargs
				 # 4. 编写扩展的功能语句
				 print(‘———’)
				 # 5. 调用被修饰的函数
				 # 调用时，必须传入 wrapper包装函数中的两个参数：*args, **kwargs
				 return fn(*args, **kwargs)  # 返回结果,  如果想在函数调用后扩展功能，修改如：
				＃ result = fn(*args, **kwargs)
				 # 6. 被修饰函数调用后的 扩展功能
				 # print(‘*******’)
			     # return result

		  return wrapper  # 7 最后，为装饰函数返回 包装函数名


	 如何使用修饰函数：
	 在某一个现有函数上一行：  @修饰函数名，如:
	 @loging
     def  add(x, y):
			 return x + y

     add(10, 20)


	 被修饰的函数执行的过程：
		 1. 调用被修饰的函数， 在Python解析器，发现有一个装饰函数，
		    停止对被修饰函数的调用，转到2步。

		 2. 调用装饰函数，同时传一个被装饰的函数名，发现装饰函数返回了
			一个其内部包装（wrapper）函数，转入第3步。

		3. 调用装饰函数的包装函数，同时传入被装饰函数中的实际参数，
          在包装函数中调用被装饰的函数，在调用它的前后可以扩展自己的功能。
		   最后 将 被装饰函数返回的结果 返回给调用的地方，即转给第1步的调用位置。


	作业练习：
		 1.  定义一个装饰函数，实现对被装饰函数的参数值范围进行判断，
		     如果超出了 1000的范围，则打印警告。

			addSalary(10000)
			addSalary(500)

		2. 定义一个装饰函数，监测查询函数(自定义)中是否包含 id属性，
			如果不包含，则打印警告。

			queryStu(name=‘disen’)
			queryStu(id=‘101’)


		 3. 定义函数，实现生成 n 个 点坐标(x , y), 每生成10个点后，
		    调用回调函数 并将生成 10个点 和 开始生成10个点的时间戳，			在回调函数中 将 10个点和时间信息写入到 pots.dat文件中。
			要求： 时间要转成yyyy-mm-dd hh:mm:ss 格式，
					   每一次信息都在同一行
						文件模式： ‘a+b’


# coding：utf-8
# 定义一个装饰函数，实现对被装饰函数的参数值范围进行判断，如果超出了 1000的范围，则打印警告。

def salary(fn):
    def wrapper(*args, **kwargs):
        if args[0] < 1000:
            print('补贴发放成功')
        else:
            print('补贴发放异常，请核查')

        result  = fn(*args, **kwargs)
        return result

    return wrapper

@salary
def num_(n):
    print('发放补贴为{0}元'.format(n))


num_(500)


