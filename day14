一. 回顾知识点

   1.
	类：  实体类， 业务类， 界面(UI)类

	定义类：  class Stu(object):
						 def __init__(self):
							   print(‘类的对象的构造方法’)

						@classmethod
						def list_stus(cls):
							  print(‘类的方法’)

						@staticmethod
						def addStu(stu):
							   print(‘类的静态方法’)

	类中的方法有三种类型： 对象方法， 类方法，类的静态方法

	2. 对象的创建
			类名(初始化参数)  :    Stu(),  在内存的堆中开辟一块内存区域(链表结构)， 创建对象之后，返回对象所在内存区域的首地址。对于返回的首地址，可以赋给一个变量，这个变量就变成了对象的引用。通过对象的引用可以访问对象的属性和方法。 创建对象时， 默认调用类的构造方法__init__(self)。

   3. 对象的销毁
			1）del  对象引用名，  删除对象引用指向的内存区域， 默认会调用类的析构方法__del__(self)
			2) 如果删除的对象中存在其它引用，则不会删除内存区域。

			s = Stu()
			b = s

			del  s  # 不会调用类的__del__()方法
			del b ＃ 会调用类的__del__()方法


   4. 类对象之间的关联关系

		 class Card:
				def __init__(self, number, money,passwd):
						self.number = number
						self.money = money
						self.passwd = passwd

             def show(self):
					   print(‘—card show()—’)


		class User:
				def __init__(self, name,bank_card)
						self.name = name
						self.bank_card = bank_card  #  用户和银行卡是一对一的关系

				def __del__(self):
					print(‘－－User－－del’)
	Card - User:
    1 		- 	1   :


   对象之间的引用
	card = Card(1, 0, ’10111’)
    user = User(‘disen’, card)
	del card  # card 引用名从栈中删除了

	card.number  # 报card没有声明或签名。
	user.bank_card.numer  # 可以的，显示用户的银行卡的卡号
    user.bank_card.show()  # 可以的， 使用对象的引用，可访问对象的属性和执行对象的方法


   del user ＃ 是否执行 User类中的__del__函数? 是可以的


第14天：默写题
1.  现有以下程序，写出程序运行的结果,
    如果存在错误，指出错误位置，并写出正确的语句。
class Cup:
      def __init__(self, name,height):
			self.__name = name

      def water(self, rise):
			print(‘{0} 注入了 {1} 升水’.format(self.__name, rise))
class User:
       def  __init__(self,name, cup):
			self.name = name
			self.cup = cup

	  ＃@classmethod
	  def water(self):
			self.cup.water(20)

	  def __del__(self):
			print(‘-- User -- del---’)

user = User(‘disen’, Cup(‘玻璃杯’, 122))
user.water()
del user

改完之后的结果：
玻璃杯注入了 20 升水
-- User -- del---

2.  在Python类中，有哪三种不同类型的方法，简单地写出定义语法

	1. 对象方法     def xx(self)
	2. 类方法
			@classmethod
			def xxx(cls)
	3. 静态方法
			@staticmethod
			def xxx()   # 参数中不能出现self, cls

3. 现有一项业务 ：“disen在Benz 4S店买了一俩Benz X7”，根据业务描述，声明相关类。
	1.  class Person:
			def __init__(self, name)
				self.name = name
			 def buy(self, car):
				..
	2.  class CarStore:
			def __init__(self,name):
				self.name =name

	3.  class Car:
			def __init__(self, name, cartstore):
				self.name = name
				self.carstore = carstore

	———	执行情况—————
	person = Person(‘disen’)
	carstore = CarStore(‘Benz 4S’)
	car = Car(‘Benz X7’, carstore)

	person.buy(car)

















