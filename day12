一、 回顾前一天内容
   1. 面向对象
	  从业务(需求)中抽象出具有相同属性和行为的对象，并为这些对象定义为一个类。

	 一切皆对象： 客观世界存在的事物

	2. 面向对象编程
		在面向对象基础上， 思考如何将类与类之间的关系抽象出来，同时对象创建时的初始化和销毁的过程进行处理。

	3. 如何定义
	class Abc:
			def __init__(self, name):
				 self.name = name		        def up(self):
					print(‘up’)
			 def down(self):
					print(‘down’)
			 def work(self):
					self.up()
					self.down()

4.  对象的实例化： 创建类的对象
	d = Abc(‘disen’)   # 类名(name) －－》类中的__init__(self, name) 构造函数（初始化函数）
	d 代表Abc类对象的一个引用，引用指向是ABC类对象在内存堆的首地址
	id(d) 显示在内存的首地址编号

	d = Abc(‘jack’)  # 同一时间，一个引用只能指向一个对象的内存首地址
	d.name
	d.up()

二、__str__的函数
	  将当前的对象，转成字符串的函数， 默认object并没有实现。
	 print() 函数中，直接打印对象（重写__str__函数之后可用）


二、私有的属性
	   在类的构造函数中，通过 “self.__属性名 ”使得属性名变成私有，此时对象不能再访问私有的属性。
		对于私有的属性可以在对象方法中访问，
			def set_name(self, name):
				 self.__name = name    # 设置self.__name 私有属性值

		私有后属性,在对象中已将名字转成“ _类名__属性名”

	   扩展： 方法私有化如何做？

				def	__方法名()		:   私有化方法，可以通过其它对象方法来调用。

      说明： 对于私有的属性和方法，对象不能调用，但是对象可以通过其它的(公共的)方法来调用

		class Book:
				def __init__(self, name):
					self.__name = name

				def __updateName(self, name):
						self.__name = name

				def modifyName(self, name):
					    self.__updateName(name)   # 类的内部， 可以调用私有的方法


		----------------------------
		book  = new Book(‘Python’)
		book.__updateName(‘H5’)  # 不能访问私有的方法
		book.modifyName(name)  # 可以调用对象方法


三、 继承

		1.  单继承
				class 子类(父类)：
					def  __init__(self, ….)
							#1.1 父类名.__init(self, ….)
							#1.2 super(子类， self).__init__(….)

					def 子类方法名(self, ..):
							super().父类的方法名(…)

		2.  重写：  在子类中，将父类的方法重新定义
						2.1） 当子类中重写了父类的方法时，即在子类对象调用时，只会调用子类中重写的方法
						2.2)  在重写父类的方法时，可以通过super().重写的方法名(…) 来调用父类的方法，
								此时， 重写的目的是扩展功能。

		思考： 子类是否继承了父类的一切？是（私有属性和私有方法）
				   在子类中，不能直接访问私有成员（属性和方法），但是可以通过父类的非私有方法来访问。




