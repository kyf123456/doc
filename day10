一、回顾昨天内容

    1）回调函数
		   A(调用方):  使用功能(函数)
		   B(被调用方)： 提供功能（函数），以回调方式(调用方提供的一个函数)返回数据，在功能完成后，通过A方提供的回调函数，将数据返回给A方。
			B：
				def   newPoints(fn):
						……完成功能
						fn(数据)
			A:
				def receiverData(data):
					   接收到数据

….处理数据（写文件、打印、再调用其它函数完成数据分析）

		       newPoints(receiverData)
2）装饰函数
装饰函数使用场景：
1.  验证数据的有效性（salary < 1000 ,  参数列表中必须存在id=‘101’）
2. 测试功能函数的运行时间(测性能: 内存占用情况 ， CPU使用情况)
3. 数据库操作过程中事务的处理
 定义装饰函数:
1)  定义装饰函数，同时函数参数接收一个函数名(被装饰的函数名),  返回一个其内部的包装函数（内部： 可以调用被装饰的函数）
					def   decorate(fn):
							return wrapper  内部的包装函数名
 2） 定义装饰函数中的包装函数， 函数的参数必须是*args, **kwargs
一般情况下，返回被装饰函数执行的结果
		def  decorate(fn):
			def  wrapper(*args, **kwargs):执行扩展功能
				 return fn(*args, **kwargs)
						‘’’
				result = fn(*args, **kwargs)
				调用功能后的扩展功能
			   return result
									‘’’
			return wrapper
		使用装饰函数：  在某一函数的上一行，使用 @装饰函数名
		@decorate
		def addSalary(salary):
			print(‘salary add success!’)
二、 递归
		递归思路：
			1. 找出两次调用的关系 ，
			2. 找出临界线（退出递归的条件）
 			3. 算出本次递归结果，并返回这个结果
		f(n):
			n*f(n-1)
			n*f(n-1)*f(n-2)….f(1)

		f(5): 阶乘
		5×4×3×2×1，临界线 1
解决递归的次数限制的方式： 尾递归
注意： Python环境中，栈有最大深度限制,可以借助于 generator生成器解决，
请查看导图的阶乘中的“尾递归”部分。
尾递归： 只返回函数本身，不包含表达式，可以本次计算的结果存放函数的参数中
		math.factorial(n)  计算n的阶乘





